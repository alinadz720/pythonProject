openapi: 3.0.1
info:
  title: Online shopping
  description: You can use the api key `special-key` to test the authorization     filters.
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://onlineshop.swagger.io/v2
- url: http://onlineshop.swagger.io/v2
tags:
- name: product
  description: Your products
- name: store
  description: Access to orders
- name: user
  description: Operations about user
paths:
  /product:
    put:
      tags:
      - product
      summary: Update an existing product
      operationId: updateProduct
      requestBody:
        description: Product that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        200:
          description: Successful
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Product not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
      - onlineshop_auth:
        - write:products
        - read:products
      x-codegen-request-body-name: body
    post:
      tags:
      - product
      summary: Add a new product to the store
      operationId: addProduct
      requestBody:
        description: Product that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        200:
          description: Successful
          content: {}
        405:
          description: Invalid input
          content: {}
      security:
      - onlineshop_auth:
        - write:products
        - read:products
      x-codegen-request-body-name: body
  /product/{productId}:
    delete:
      tags:
      - product
      summary: Deletes a product
      operationId: deleteProduct
      parameters:
      - name: api_key
        in: header
        schema:
          type: string
      - name: productId
        in: path
        description: Product id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Product not found
          content: {}
      security:
      - onlineshop_auth:
        - write:products
        - read:products
  /store/inventory{productId}:
    get:
      tags:
      - store
      summary: Ğ¡hecks for product availability
      description: Returns true if product is still available or false otherwise
      operationId: getStatus
      parameters:
      - name: productId
        in: path
        description: Product id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: boolean
  /store/order:
    post:
      tags:
      - store
      summary: Place an order for a product
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the product
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
          content: {}
      security:
      - onlineshop_auth:
        - write:products
        - read:products
      x-codegen-request-body-name: body
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Find order by ID
      description: For valid response try integer IDs with value >= 1 and <= 8.         Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of needed product
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
      security:
      - onlineshop_auth:
        - write:products
        - read:products
    delete:
      tags:
      - store
      summary: Delete order by ID
      description: For valid response try integer IDs with value >= 1 and <= 8.         Other
        values will generated exceptions
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
      security:
      - onlineshop_auth:
        - write:products
        - read:products
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - onlineshop_auth:
        - write:products
        - read:products
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - onlineshop_auth:
        - write:products
        - read:products
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - onlineshop_auth:
        - write:products
        - read:products
components:
  schemas:
    Order:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    User:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
      xml:
        name: User
    Product:
      required:
      - name
      type: object
      properties:
        productId:
          maximum: 8
          minimum: 1
          type: integer
          format: int64
        name:
          type: string
          example: phone
        status:
          type: string
          description: product status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Product
  securitySchemes:
    onlineshop_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://onlineshop.swagger.io/oauth/dialog
          scopes:
            write:products: modify products  in your account
            read:products: read your products
    api_key:
      type: apiKey
      name: api_key
      in: header
